apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-android-extensions"
apply plugin: "io.fabric"
apply plugin: "com.github.ben-manes.versions"

def libraries = rootProject.ext.libraries
def config = rootProject.ext.config

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

def productVersion = "$versionMajor.$versionMinor.$versionPatch"

def static getCommitCount() {
    return "git rev-list HEAD --count --no-merges".execute().text.trim().toInteger()
}

def static getBuildNumber() {
    def buildNumber = System.getenv("BITRISE_BUILD_NUMBER")
    return buildNumber != null ? buildNumber.toInteger() : 0
}

android {
    compileSdkVersion config.compileSdk
    buildToolsVersion config.buildTools

    defaultConfig {
        applicationId "com.leaguechampions"
        minSdkVersion config.minSdk
        targetSdkVersion config.targetSdk
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            File projectProperties = file("../../../keystores/LeagueChampions/leaguechampions.properties")
            if (projectProperties.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(projectProperties))

                storeFile file(props["keystore.path"])
                storePassword props["keystore.password"]
                keyAlias props["keystore.key.alias"]
                keyPassword props["keystore.key.password"]
            }
        }
        debug {
            File keystoreDebug = file("../debug.keystore")
            if (keystoreDebug.exists()) {
                storeFile keystoreDebug
                storePassword "android"
                keyAlias "androiddebugkey"
                keyPassword "android"
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            useProguard true
            signingConfig signingConfigs.release
            ext.enableCrashlytics = false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            debuggable true
            minifyEnabled false
            useProguard false
            signingConfig signingConfigs.debug
            ext.enableCrashlytics = false
        }
    }

    flavorDimensions "server"
    productFlavors {
        prod {
            dimension "server"
            def versionBuild = getCommitCount()
            versionCode versionBuild
            versionName "$productVersion.$versionBuild"
            resValue "string", "app_name", "League Champions"
        }
        dev {
            dimension "server"
            applicationIdSuffix ".dev"
            versionCode 0
            versionName "$productVersion-DEV"
            resValue "string", "app_name", "DEV - League Champions"
            multiDexEnabled true
        }
    }

    variantFilter { variant ->
        def buildType = variant.buildType.name
        def flavor = variant.flavors.get(0).name
        if (buildType == "debug") {
            if (flavor == "prod") {
                variant.setIgnore(true)
            }
        } else if (buildType == "release") {
            if (flavor == "dev") {
                variant.setIgnore(true)
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFileName = output.outputFileName
                    .replace("app", "LeagueChampions")
                    .replace(".apk", variant.buildType.name == "release" ? "-${productVersion}." + getCommitCount() + ".apk" : "-${productVersion}.apk")
        }
    }

    dataBinding {
        enabled = true
    }

    dexOptions {
        maxProcessCount 8
        javaMaxHeapSize "2g"
        preDexLibraries true
        dexInProcess true
    }

    packagingOptions {
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/NOTICE.txt"
        exclude ".readme"
    }

    lintOptions {
        abortOnError true
        xmlReport false
        htmlReport true
        warning "InvalidPackage"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // KOTLIN
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre8:$config.kotlin"

    // SUPPORT
    implementation "com.android.support:design:$libraries.supportLib"
    implementation "com.android.support:appcompat-v7:$libraries.supportLib"
    implementation "com.android.support:recyclerview-v7:$libraries.supportLib"
    implementation "com.android.support:support-compat:$libraries.supportLib"
    implementation "com.android.support:support-core-utils:$libraries.supportLib"
    implementation "com.android.support:support-core-ui:$libraries.supportLib"
    implementation "com.android.support:support-fragment:$libraries.supportLib"
    implementation "com.android.support.constraint:constraint-layout:$libraries.constraintLayout"

    // ARCH
    implementation "android.arch.lifecycle:extensions:$libraries.arch"
    kapt "android.arch.lifecycle:compiler:$libraries.arch"

    // DAGGER
    implementation "com.google.dagger:dagger:$libraries.dagger"
    implementation "com.google.dagger:dagger-android:$libraries.dagger"
    implementation "com.google.dagger:dagger-android-support:$libraries.dagger"
    kapt "com.google.dagger:dagger-compiler:$libraries.dagger"
    kapt "com.google.dagger:dagger-android-processor:$libraries.dagger"

    // DATA BINDING
    kapt 'com.android.databinding:compiler:3.0.1'

    // RXJAVA
    implementation "io.reactivex.rxjava2:rxjava:$libraries.rxjava"
    implementation "io.reactivex.rxjava2:rxandroid:$libraries.rxandroid"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0"

    // GSON
    implementation "com.google.code.gson:gson:$libraries.gson"

    // OKIO
    implementation "com.squareup.okio:okio:$libraries.okio"

    // OKHTTP
    implementation "com.squareup.okhttp3:okhttp:$libraries.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$libraries.okhttp"

    // RETROFIT
    implementation "com.squareup.retrofit2:retrofit:$libraries.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$libraries.retrofit"
    debugImplementation "com.squareup.retrofit2:retrofit-mock:$libraries.retrofit"

    // PICASSO
    implementation "com.squareup.picasso:picasso:$libraries.picasso"
    implementation "com.jakewharton.picasso:picasso2-okhttp3-downloader:$libraries.picasso_okhttp"

    implementation "com.github.bumptech.glide:glide:$libraries.glide"
    implementation "com.github.bumptech.glide:okhttp3-integration:$libraries.glide_okhttp"

    // TIMBER
    implementation "com.jakewharton.timber:timber:$libraries.timber"

    // CRASHLYTICS
    implementation("com.crashlytics.sdk.android:crashlytics:$libraries.crashlytics@aar") {
        transitive = true
    }

    // LEAK CANARY
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$libraries.leakcanary"

    // TESTS
    testImplementation "junit:junit:$libraries.junit"
    testImplementation "org.powermock:powermock-module-junit4:$libraries.powermock"
    testImplementation "org.powermock:powermock-core:$libraries.powermock"
    testImplementation "org.powermock:powermock-api-mockito:$libraries.powermock"
    testImplementation "org.mockito:mockito-core:$libraries.mockito"
    testImplementation("org.robolectric:robolectric:$libraries.robolectric") {
        exclude group: "commons-logging", module: "commons-logging"
        exclude group: "org.apache.httpcomponents", module: "httpclient"
    }

    testImplementation "org.assertj:assertj-core:$libraries.assertj"
    testImplementation "org.hamcrest:hamcrest-library:$libraries.hamcrest"

    androidTestImplementation "com.android.support.test:runner:$libraries.supportTest"
    androidTestImplementation "com.android.support.test:rules:$libraries.supportTest"
    androidTestImplementation "com.android.support:support-annotations:$libraries.supportLib"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$libraries.espresso"
    androidTestImplementation "com.android.support.test.espresso:espresso-idling-resource:$libraries.espresso"
    androidTestImplementation("com.android.support.test.espresso:espresso-contrib:$libraries.espresso") {
        exclude group: "com.android.support", module: "appcompat-v7"
        exclude group: "com.android.support", module: "design"
        exclude group: "com.android.support", module: "support-v4"
        exclude module: "recyclerview-v7"
    }
    androidTestImplementation "com.google.code.findbugs:jsr305:3.0.1"
}

apply plugin: "com.google.gms.google-services"