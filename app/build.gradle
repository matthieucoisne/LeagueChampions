apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-android-extensions"
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: "io.fabric"
apply plugin: "com.github.ben-manes.versions"

apply from: "../test_dependencies.gradle"

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

def productVersion = "$versionMajor.$versionMinor.$versionPatch"

def static getCommitCount() {
    return "git rev-list HEAD --count --no-merges".execute().text.trim().toInteger()
}

def static getBuildNumber() {
    def buildNumber = System.getenv("BITRISE_BUILD_NUMBER")
    return buildNumber != null ? buildNumber.toInteger() : 0
}

android {
    defaultConfig {
        applicationId "com.leaguechampions"
    }

    signingConfigs {
        release {
            File projectProperties = file("../../../keystores/LeagueChampions/leaguechampions.properties")
            if (projectProperties.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(projectProperties))

                storeFile file(props["keystore.path"])
                storePassword props["keystore.password"]
                keyAlias props["keystore.key.alias"]
                keyPassword props["keystore.key.password"]
            }
        }
        debug {
            File keystoreDebug = file("../debug.keystore")
            if (keystoreDebug.exists()) {
                storeFile keystoreDebug
                storePassword "android"
                keyAlias "androiddebugkey"
                keyPassword "android"
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            useProguard true
            signingConfig signingConfigs.release
            ext.enableCrashlytics = false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            debuggable true
            minifyEnabled false
            useProguard false
            signingConfig signingConfigs.debug
            ext.enableCrashlytics = false
        }
    }

    flavorDimensions "server"
    productFlavors {
        prod {
            dimension "server"
            def versionBuild = getCommitCount()
            versionCode versionBuild
            versionName "$productVersion.$versionBuild"
            resValue "string", "app_name", "League Champions"
        }
        dev {
            dimension "server"
            applicationIdSuffix ".dev"
            versionCode 0
            versionName "$productVersion-DEV"
            resValue "string", "app_name", "DEV - League Champions"
            multiDexEnabled true
        }
    }

    variantFilter { variant ->
        def buildType = variant.buildType.name
        def flavor = variant.flavors.get(0).name
        if (buildType == "debug") {
            if (flavor == "prod") {
                variant.setIgnore(true)
            }
        } else if (buildType == "release") {
            if (flavor == "dev") {
                variant.setIgnore(true)
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFileName = output.outputFileName
                    .replace("app", "LeagueChampions")
                    .replace(".apk", variant.buildType.name == "release" ? "-${productVersion}." + getCommitCount() + ".apk" : "-${productVersion}.apk")
        }
    }

    dexOptions {
        maxProcessCount 8
        javaMaxHeapSize "2g"
        preDexLibraries true
        dexInProcess true
    }

    packagingOptions {
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/NOTICE.txt"
        exclude ".readme"
    }

    lintOptions {
        abortOnError true
        xmlReport false
        htmlReport true
        warning "InvalidPackage"
    }

    dependencyUpdates.resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ["alpha", "beta", "rc", "cr", "m"].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject("Release candidate")
                }
            }
        }
    }
}

dependencies {
    implementation project(':features:champions')
    implementation project(':features:settings')
    implementation project(':libraries:core')

    // KOTLIN
    implementation Dependencies.kotlin
    implementation Dependencies.kotlin_coroutines_core
    implementation Dependencies.kotlin_coroutines_android

    implementation Dependencies.android_material

    // ANDROIDX
    implementation Dependencies.androidx_activity_ktx
    implementation Dependencies.androidx_appcompat
    implementation Dependencies.androidx_constraintlayout
    implementation Dependencies.androidx_core_ktx
    implementation Dependencies.androidx_fragment
    implementation Dependencies.androidx_legacy_core_utils
    implementation Dependencies.androidx_legacy_core_ui
    implementation Dependencies.androidx_lifecycle_extentions
    implementation Dependencies.androidx_lifecycle_runtime_ktx
    implementation Dependencies.androidx_lifecycle_viewmodel_ktx
    implementation Dependencies.androidx_lifecycle_viewmodel_savedstate
    implementation Dependencies.androidx_lifecycle_livedata_core_ktx
    implementation Dependencies.androidx_lifecycle_livedata_ktx
    implementation Dependencies.androidx_lifecycle_common_java8
    implementation Dependencies.androidx_navigation_runtime_ktx
    implementation Dependencies.androidx_navigation_fragment_ktx
    implementation Dependencies.androidx_navigation_ui_ktx
    implementation Dependencies.androidx_recyclerview

    // ROOM
    implementation Dependencies.androidx_room_runtime
    implementation Dependencies.androidx_room_ktx
    kapt Dependencies.androidx_room_compiler
    androidTestImplementation Dependencies.androidx_room_testing

    // DAGGER
    implementation Dependencies.dagger
    implementation Dependencies.dagger_android
    implementation Dependencies.dagger_android_support
    kapt Dependencies.dagger_compiler
    kapt Dependencies.dagger_android_processor

    // GSON
    implementation Dependencies.gson

    // OKIO
    implementation Dependencies.okio

    // OKHTTP
    implementation Dependencies.okhttp
    implementation Dependencies.okhttp_logging_interceptor

    // RETROFIT
    implementation Dependencies.retrofit
    implementation Dependencies.retrofit_converter_gson
    debugImplementation Dependencies.retrofit_mock

    // PICASSO
    implementation Dependencies.picasso
    implementation Dependencies.picasso_okhttp_downloader

    // GLIDE
    implementation Dependencies.glide
    implementation Dependencies.glide_okhttp_integration

    // TIMBER
    implementation Dependencies.timber

    // CRASHLYTICS
    implementation Dependencies.crashlytics

    // LEAK CANARY
    debugImplementation Dependencies.leakcanary
}

apply plugin: "com.google.gms.google-services"
